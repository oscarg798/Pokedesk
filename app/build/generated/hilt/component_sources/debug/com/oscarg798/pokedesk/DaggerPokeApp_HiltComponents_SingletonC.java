// Generated by Dagger (https://dagger.dev).
package com.oscarg798.pokedesk;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.google.gson.Gson;
import com.oscarg798.pokedesk.detail.ui.PokemonDetailViewModel;
import com.oscarg798.pokedesk.detail.usecase.GetPokemonDetail;
import com.oscarg798.pokedesk.di.AppModule;
import com.oscarg798.pokedesk.di.AppModule_ProvidePokemonDaoFactory;
import com.oscarg798.pokedesk.di.AppModule_ProvidePokemonStatDaoFactory;
import com.oscarg798.pokedesk.di.AppModule_ProvidePokemonTypeDaoFactory;
import com.oscarg798.pokedesk.di.CoroutinesProviderModule;
import com.oscarg798.pokedesk.di.CoroutinesProviderModule_ProvideCoroutineContextProviderFactory;
import com.oscarg798.pokedesk.di.DatabaseModule;
import com.oscarg798.pokedesk.di.DatabaseModule_ProvideDatabaseFactory;
import com.oscarg798.pokedesk.di.UtilModule;
import com.oscarg798.pokedesk.di.UtilModule_ProvideGsonFactory;
import com.oscarg798.pokedesk.lib.definitions.CoroutineContextProvider;
import com.oscarg798.pokedesk.lib.network.NetworkModule;
import com.oscarg798.pokedesk.lib.network.NetworkModule_ProvideHttpClientFactory;
import com.oscarg798.pokedesk.lib.network.NetworkModule_ProvideLoggingInterceptorFactory;
import com.oscarg798.pokedesk.lib.network.RetrofitModule;
import com.oscarg798.pokedesk.lib.network.RetrofitModule_ProvideRetrofitFactory;
import com.oscarg798.pokedesk.lib.pokemon.di.PokemonModule;
import com.oscarg798.pokedesk.lib.pokemon.di.PokemonModule_ProvidePokemonServiceFactory;
import com.oscarg798.pokedesk.lib.pokemon.network.PokemonService;
import com.oscarg798.pokedesk.lib.pokemon.persistence.PokeDexDatabase;
import com.oscarg798.pokedesk.lib.pokemon.persistence.PokemonDao;
import com.oscarg798.pokedesk.lib.pokemon.persistence.StatsDao;
import com.oscarg798.pokedesk.lib.pokemon.persistence.TypeDao;
import com.oscarg798.pokedesk.lib.pokemon.repository.PokemonRepository;
import com.oscarg798.pokedesk.lib.pokemon.utils.IdExtractor;
import com.oscarg798.pokedesk.lib.type.TypeColorLoader;
import com.oscarg798.pokedesk.lib.type.TypeRepository;
import com.oscarg798.pokedesk.lib.type.TypeService;
import com.oscarg798.pokedesk.lib.type.di.TypeModule;
import com.oscarg798.pokedesk.lib.type.di.TypeModule_ProvideTypeRepositoryFactory;
import com.oscarg798.pokedesk.pokemonlist.ui.PokemonListViewModel;
import com.oscarg798.pokedesk.pokemonlist.ui.PokemonListViewModel_HiltModules_KeyModule_ProvideFactory;
import com.oscarg798.pokedesk.pokemonlist.usecase.FetchPokemons;
import com.oscarg798.pokedesk.pokemonlist.usecase.GetPokemonListItems;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerPokeApp_HiltComponents_SingletonC {
  private DaggerPokeApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder coroutinesProviderModule(CoroutinesProviderModule coroutinesProviderModule) {
      Preconditions.checkNotNull(coroutinesProviderModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder databaseModule(DatabaseModule databaseModule) {
      Preconditions.checkNotNull(databaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder pokemonModule(PokemonModule pokemonModule) {
      Preconditions.checkNotNull(pokemonModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder retrofitModule(RetrofitModule retrofitModule) {
      Preconditions.checkNotNull(retrofitModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder typeModule(TypeModule typeModule) {
      Preconditions.checkNotNull(typeModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder utilModule(UtilModule utilModule) {
      Preconditions.checkNotNull(utilModule);
      return this;
    }

    public PokeApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements PokeApp_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public PokeApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements PokeApp_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public PokeApp_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements PokeApp_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public PokeApp_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements PokeApp_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public PokeApp_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements PokeApp_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public PokeApp_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements PokeApp_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public PokeApp_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements PokeApp_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public PokeApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends PokeApp_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends PokeApp_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends PokeApp_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends PokeApp_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private Provider<PokemonDetailViewModel.Factory> factoryProvider;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(activityParam);

    }

    private TypeRepository typeRepository() {
      return new TypeRepository(singletonCImpl.typeColorLoaderProvider.get());
    }

    private GetPokemonDetail getPokemonDetail() {
      return new GetPokemonDetail(singletonCImpl.pokemonRepositoryProvider.get(), typeRepository());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final Activity activityParam) {
      this.factoryProvider = SingleCheck.provider(new SwitchingProvider<PokemonDetailViewModel.Factory>(singletonCImpl, activityRetainedCImpl, activityCImpl, 0));
    }

    @Override
    public void injectMainActivity(MainActivity arg0) {
    }

    @Override
    public PokemonDetailViewModel.Factory pokemonDetailFactory() {
      return factoryProvider.get();
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return Collections.<String>singleton(PokemonListViewModel_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ActivityCImpl activityCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ActivityCImpl activityCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.activityCImpl = activityCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.oscarg798.pokedesk.detail.ui.PokemonDetailViewModel.Factory 
          return (T) new PokemonDetailViewModel.Factory() {
            @Override
            public PokemonDetailViewModel create(int id) {
              return new PokemonDetailViewModel(id, activityCImpl.getPokemonDetail(), singletonCImpl.provideCoroutineContextProvider.get());
            }
          };

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ViewModelCImpl extends PokeApp_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<GetPokemonListItems> getPokemonListItemsProvider;

    private Provider<PokemonListViewModel> pokemonListViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private TypeRepository typeRepository() {
      return new TypeRepository(singletonCImpl.typeColorLoaderProvider.get());
    }

    private FetchPokemons fetchPokemons() {
      return new FetchPokemons(singletonCImpl.pokemonRepositoryProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.getPokemonListItemsProvider = SingleCheck.provider(new SwitchingProvider<GetPokemonListItems>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1));
      this.pokemonListViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return Collections.<String, Provider<ViewModel>>singletonMap("com.oscarg798.pokedesk.pokemonlist.ui.PokemonListViewModel", ((Provider) pokemonListViewModelProvider));
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.oscarg798.pokedesk.pokemonlist.ui.PokemonListViewModel 
          return (T) new PokemonListViewModel(viewModelCImpl.getPokemonListItemsProvider.get(), viewModelCImpl.fetchPokemons(), singletonCImpl.provideCoroutineContextProvider.get());

          case 1: // com.oscarg798.pokedesk.pokemonlist.usecase.GetPokemonListItems 
          return (T) new GetPokemonListItems(singletonCImpl.pokemonRepositoryProvider.get(), viewModelCImpl.typeRepository());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends PokeApp_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends PokeApp_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends PokeApp_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<OkHttpClient> provideHttpClientProvider;

    private Provider<Gson> provideGsonProvider;

    private Provider<Retrofit> provideRetrofitProvider;

    private Provider<PokemonService> providePokemonServiceProvider;

    private Provider<IdExtractor> idExtractorProvider;

    private Provider<PokeDexDatabase> provideDatabaseProvider;

    private Provider<PokemonDao> providePokemonDaoProvider;

    private Provider<TypeDao> providePokemonTypeDaoProvider;

    private Provider<StatsDao> providePokemonStatDaoProvider;

    private Provider<PokemonRepository> pokemonRepositoryProvider;

    private Provider<TypeColorLoader> typeColorLoaderProvider;

    private Provider<CoroutineContextProvider> provideCoroutineContextProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam);

    }

    private Set<Interceptor> setOfInterceptor() {
      return Collections.<Interceptor>singleton(NetworkModule_ProvideLoggingInterceptorFactory.provideLoggingInterceptor());
    }

    private TypeService typeService() {
      return TypeModule_ProvideTypeRepositoryFactory.provideTypeRepository(provideRetrofitProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam) {
      this.provideHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonCImpl, 3));
      this.provideGsonProvider = SingleCheck.provider(new SwitchingProvider<Gson>(singletonCImpl, 4));
      this.provideRetrofitProvider = SingleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 2));
      this.providePokemonServiceProvider = SingleCheck.provider(new SwitchingProvider<PokemonService>(singletonCImpl, 1));
      this.idExtractorProvider = SingleCheck.provider(new SwitchingProvider<IdExtractor>(singletonCImpl, 5));
      this.provideDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<PokeDexDatabase>(singletonCImpl, 7));
      this.providePokemonDaoProvider = SingleCheck.provider(new SwitchingProvider<PokemonDao>(singletonCImpl, 6));
      this.providePokemonTypeDaoProvider = SingleCheck.provider(new SwitchingProvider<TypeDao>(singletonCImpl, 8));
      this.providePokemonStatDaoProvider = SingleCheck.provider(new SwitchingProvider<StatsDao>(singletonCImpl, 9));
      this.pokemonRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<PokemonRepository>(singletonCImpl, 0));
      this.typeColorLoaderProvider = DoubleCheck.provider(new SwitchingProvider<TypeColorLoader>(singletonCImpl, 10));
      this.provideCoroutineContextProvider = DoubleCheck.provider(new SwitchingProvider<CoroutineContextProvider>(singletonCImpl, 11));
    }

    @Override
    public void injectPokeApp(PokeApp arg0) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.oscarg798.pokedesk.lib.pokemon.repository.PokemonRepository 
          return (T) new PokemonRepository(singletonCImpl.providePokemonServiceProvider.get(), singletonCImpl.typeService(), singletonCImpl.idExtractorProvider.get(), singletonCImpl.providePokemonDaoProvider.get(), singletonCImpl.providePokemonTypeDaoProvider.get(), singletonCImpl.providePokemonStatDaoProvider.get(), singletonCImpl.provideGsonProvider.get());

          case 1: // com.oscarg798.pokedesk.lib.pokemon.network.PokemonService 
          return (T) PokemonModule_ProvidePokemonServiceFactory.providePokemonService(singletonCImpl.provideRetrofitProvider.get());

          case 2: // retrofit2.Retrofit 
          return (T) RetrofitModule_ProvideRetrofitFactory.provideRetrofit(singletonCImpl.provideHttpClientProvider.get(), singletonCImpl.provideGsonProvider.get());

          case 3: // okhttp3.OkHttpClient 
          return (T) NetworkModule_ProvideHttpClientFactory.provideHttpClient(singletonCImpl.setOfInterceptor());

          case 4: // com.google.gson.Gson 
          return (T) UtilModule_ProvideGsonFactory.provideGson();

          case 5: // com.oscarg798.pokedesk.lib.pokemon.utils.IdExtractor 
          return (T) new IdExtractor();

          case 6: // com.oscarg798.pokedesk.lib.pokemon.persistence.PokemonDao 
          return (T) AppModule_ProvidePokemonDaoFactory.providePokemonDao(singletonCImpl.provideDatabaseProvider.get());

          case 7: // com.oscarg798.pokedesk.lib.pokemon.persistence.PokeDexDatabase 
          return (T) DatabaseModule_ProvideDatabaseFactory.provideDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 8: // com.oscarg798.pokedesk.lib.pokemon.persistence.TypeDao 
          return (T) AppModule_ProvidePokemonTypeDaoFactory.providePokemonTypeDao(singletonCImpl.provideDatabaseProvider.get());

          case 9: // com.oscarg798.pokedesk.lib.pokemon.persistence.StatsDao 
          return (T) AppModule_ProvidePokemonStatDaoFactory.providePokemonStatDao(singletonCImpl.provideDatabaseProvider.get());

          case 10: // com.oscarg798.pokedesk.lib.type.TypeColorLoader 
          return (T) new TypeColorLoader(singletonCImpl.provideGsonProvider.get(), ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 11: // com.oscarg798.pokedesk.lib.definitions.CoroutineContextProvider 
          return (T) CoroutinesProviderModule_ProvideCoroutineContextProviderFactory.provideCoroutineContextProvider();

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
